import streamlit as st
from datetime import datetime
import mysql.connector   

st.set_page_config(layout="wide")

def create_table():
    conn = sqlite3.connect('todo.db')
    c = conn.cursor()

    c.execute("CREATE TABLE IF NOT EXISTS TODO_INFO (TASK_ID INTEGER PRIMARY KEY AUTOINCREMENT," \
    "TASK_NAME TEXT, TEXT_STATUS TEXT, CREATED_AT DATETIME)")

    commit()
    close()

def add_task(task):
    current_time = datetime.now()
    conn = sqlite3.connect('todo.db')
    c = conn.cursor()
    c.execute("INSERT INTO TODO_INFO (TASK_NAME, TASK_STATUS, CREATED_AT) VALUES (?, ?, ?), (task, 'Icomplete', current_time)")
    commit()
    close()

def get_task():
    conn = sqlite3.connect('todo.db')
    c = conn.cursor()
    c.execute("SELECT TASK_ID, TASK_NAME, TASK_STATUS, CREATED_AT FROM TODO_INFO")
    tasks = c.fetchall()
    conn.close()
    return tasks

def update_status(task_id, task_status):
    conn = sqlite3.connect('todo.db')
    c = conn.cursor()
    c.execute("UPDATE TODO_INFO SET TASK_STATUS=? WHERE_ID=?"), (task_status, task_id)
    conn.commit()
    conn.close()

def delete_task(task_id):
    conn = sqlite3.connect('todo.db')
    c = conn.cursor()
    c.execute("DELETE FROM TODO_INFO WHERE TASK_ID=?"), (task_id)
    conn.commit()
    conn.close()

def main():
    st.title('Simple streamlit app To-Do App with sqlite3)

    create_table()

    new_task = st.text_input('**Enter a New Task:**, key ="input_task_name")
    if st.button("Add Task):
        if new_task:
        add_task(new_task)
        st.success(f"Task"{new_task} addded successfully!)
    else:
        st.warning("Please enter a task.)

    
    st.header("Tasks List")
    tasks = get_tasks()
    for task in tasks:
        task_id, task_name, task_status, created_at = task
        checkbox_id = f"complete checkbox_{task_id}"
        delete_button_id = f"delete_button_{task_id}"

        col1, col2, col3, col4 = st.columns([2, 3, 1, 2])

        with col1:
            st.write(f"**Task ID:** {task_id}  at {created_at}")
        with col2:
            st.write(f"**Task:** {task_name}")
        with col3:
            if st.checkbox("Marks as complete' if task_status == 'Incomplete' else 'Mark as Icomplete')
            new_status = 'Complete' if task_status == 'Icomplete' else 'Incomplete'
            update_status(task_id, new_status)
            st.success(f"Task marked as {new_status.lower()}!')
            st.rerun()
        with col4:
            if st.button("X', key = delete_button_id, type ="primary"):
                delete_task(task_id)
                st.success("Task deleted successfully!)
                st.rerun()

        st.write('----')

if __name__ = '__main__':
    main()

        

